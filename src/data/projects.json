[
  {
    "title": "Kuphil Web",
    "date": "2021.12 - 2024.05",
    "tags": ["4인 팀", "사이트 프로젝트", "반응형", "리뉴얼"],
    "color": "#FBE7D4",
    "link": "https://www.kuphil.com",
    "git": "https://github.com/Choiheeju59/kuphilweb_v2",
    "introduce": [
      "교내 오케스트라 동아리 웹사이트를 제작하는 프로젝트입니다.",
      "동아리에 소속감을 느껴서 활성화를 위해 동아리 단원 4명을 모아 자발적으로 진행했습니다.",
      "2023년 5월에 웹사이트를 배포한 후, 사용자들을 대상으로 설문을 진행하고 특정 사용자를 대상으로 실제 웹 사이트에서의 경험을 분석하여 사용자 평가를 진행했습니다.",
      "사용자 평가를 바탕으로 리뉴얼과 유지보수를 하여 2024년 5월에 프로젝트를 완료했습니다."
    ],
    "goal": [
      "동아리의 정보를 제공하고 클래식과 가까워지기 위한 즐길 거리를 통해 궁극적으로는 동아리 홍보가 잘 될 수 있도록 하는 것입니다.",
      "리뉴얼을 진행한 이후, 현재는 동아리 임원과의 지속적인 소통을 통한 홈페이지의 발전을 새로운 목표로 삼았습니다."
    ],
    "feature": [
      "동아리 소개 및 연혁 정보를 확인할 수 있습니다.",
      "역대 연주회 정보를 담고 있는 아카이브를 제공합니다.",
      "신입 단원 모집 글과 제휴 정보를 확인할 수 있습니다.",
      "서비스 내의 즐길 거리(클래식과 결합한 심리테스트, 클래식 이상형 월드컵, 클래식 능력고사)를 통해 클래식에 거리낌 없이 다가갈 수 있습니다."
    ],
    "role": [
      {
        "name": "팀장",
        "explain": "팀장 역할을 맡아 팀을 이끌며 프로젝트의 기획, 개발, 및 배포를 성공적으로 관리했습니다.\n\n기획 단계에서 팀원들 간에 프로젝트의 방향성과 주요 기능에 대한 의견 차이로 인한 갈등, 개발 단계에서 충분한 소통이 없는 코드 수정으로 인한 갈등이 존재했습니다. 팀장으로서 모든 팀원의 의견을 경청하고, 논의를 통해 방향성을 확실시했습니다. 또한, 회의를 통해 코드 수정 전 컨펌을 의무화하는 방안을 채택하여 소통이 이루어질 수 있도록 했습니다."
      },
      {
        "name": "기획 및 디자인",
        "explain": "모든 팀원이 함께 기획과 디자인을 진행했습니다.\n\n프로젝트의 목표와 부합할 수 있는 기능을 기획하고자 했으며 사용자 입장에서 필요한 기능과 사용 흐름을 고려하여 주요 기능들을 결정했습니다. 사용자 피드백을 반영해 기능 우선순위를 조정하고, 사용자 요구를 충족할 수 있는 방향으로 기획을 수정해 나갔습니다. 이를 통해 최종적으로 프로젝트의 방향성을 명확히 했습니다.\n\n디자인 단계에서는 사용자 경험을 최우선으로 고려하여 직관적이고 시각적으로 매력적인 인터페이스를 개발했습니다. 또한 다양한 디바이스에서 일관된 사용자 경험을 보장하기 위해 반응형 디자인을 구현했습니다."
      },
      {
        "name": "프론트엔드 개발",
        "explain": "메인 페이지를 포함하여 신입 단원 모집 및 제휴 제안 페이지를 담당하고, 악기를 이용한 심리테스트, 클래식 이상형 월드컵, 클래식 능력고사 콘텐츠를 개발했습니다.\n\n프론트엔드 개발자로서 JavaScript와 React를 사용하여 사용자 인터페이스와 사용자 경험을 최적화하는 데 중점을 두고 프로젝트를 진행했습니다. 컴포넌트를 모듈화하여 유지보수성과 재사용성을 높였으며, React Router를 통해 애플리케이션 내의 페이지 전환을 원활하게 구현했습니다.\n\n또한, 데이터와 상호작용을 할 수 있도록 Axios를 통해 API 통신을 구현하고, 다양한 브라우저와 디바이스에서 테스트하여 모든 사용자에게 최적의 경험을 제공할 수 있도록 했습니다."
      },
      {
        "name": "배포 및 사용자 평가",
        "explain": "AWS를 통해 프로젝트를 배포하여 안정적인 환경에서 서비스를 제공했습니다. 첫 번째 버전에서는 Node.js의 Express를 사용하여 백엔드 서버와 전체 파일을 배포했습니다. 두 번째 버전에서는 Node.js의 Express를 통해 백엔드 API를 배포하고, NGINX를 사용하여 프론트엔드의 정적 파일을 서빙했습니다.\n\n첫 번째 버전을 배포한 후, 온라인 설문과 대면 인터뷰를 통해 사용자 평가를 진행하여 사용자의 요구와 문제점을 파악했습니다. 이를 바탕으로 개선 사항을 도출하여 두 번째 버전으로 리뉴얼했습니다."
      }
    ],
    "tech": [
      [
        {
          "name": "HTML, CSS, JavaScript",
          "explain": "React, Vue, Angular 등의 프레임워크와 라이브러리는 자바스크립트로 구축되었으며, 자바스크립트의 명확한 이해가 뒷받침되어야 했습니다. 자바스크립트의 기본 개념과 문법을 강화하기 위해 이런 라이브러리나 프레임워크를 사용하지 않고 웹 사이트를 제작했습니다."
        },
        {
          "name": "Node.js",
          "explain": "백엔드는 프론트엔드와 비슷하게 자바스크립트를 이용할 수 있는 Node.js를 사용하게 됐습니다."
        }
      ],
      [
        {
          "name": "JavaScript, React",
          "explain": "버전 1을 구현하면서 헤더와 푸터를 비롯해 재사용할 수 있는 컴포넌트의 필요성을 많이 느끼게 되었습니다. 또한, 여러 기능이 추가되면서 상태 변화에 따라 UI를 효율적으로 업데이트하여 매끄럽고 반응성 있는 UI가 필요했기 때문에 자바스크립트와 함께 리액트를 사용하기로 했습니다."
        },
        {
          "name": "React Router",
          "explain": "프로젝트에서 여러 페이지를 구현하고, 페이지 간의 전환을 원활하게 처리하기 위해 React Router를 사용했습니다.\n\n서버에서 라우팅하는 것이 아닌 클라이언트에서 라우팅을 관리하여 매끄러운 페이지 이동으로 사용자 경험을 개선하고 성능을 최적화할 수 있습니다."
        },
        {
          "name": "Axios",
          "explain": "백엔드와 HTTP 통신을 진행할 때, Axios와 Fetch 중 Axios를 선택했습니다. Axios는 Fetch와 달리 자동으로 JSON 데이터를 파싱할 수 있어 코드가 더 간결하고 직관적이며, HTTP 에러를 자동으로 감지하고 catch 블록에서 처리할 수 있기 때문에 에러 핸들링이 더 용이합니다."
        },
        {
          "name": "Styled-components",
          "explain": "Styled-components는 리액트의 컴포넌트 기반 아키텍처를 따르기 때문에 리액트와 같은 위치에서 스타일을 관리할 수 있습니다. 또한, 리액트의 props를 사용하여 스타일링하는 것이 용이했기에 상태에 따라 스타일을 쉽게 변경할 수 있습니다."
        },
        {
          "name": "NGINX",
          "explain": "리액트로 빌드된 애플리케이션은 정적 파일(HTML, CSS, JavaScript)로 변환되므로, NGINX는 이 파일들을 빠르고 효율적으로 서빙하는 데 최적화되어 있습니다. 또한, NGINX는 리버스 프록시로 작동할 수 있어 클라이언트 요청을 백엔드의 Express 서버로 전달하고, 백엔드로부터 받은 응답을 클라이언트에게 반환할 수 있습니다."
        }
      ]
    ]
  },
  {
    "title": "Color, me",
    "date": "2023.01 - 2023.02 / 2023.11",
    "tags": ["개인", "토이 프로젝트", "포팅"],
    "color": "#e0e0e0",
    "link": "https://chromewebstore.google.com/detail/ldcmnbbjcbciolddfffpfghlcgnogacp?hl=ko&utm_source=ext_sidebar",
    "git": "https://github.com/rkddusen/ColorMe",
    "introduce": [
      "원하는 색상 조합을 웹에 저장할 수 있는 웹서비스를 제작하는 프로젝트입니다.",
      "GitHub Pages로 배포했지만, 크롬 익스텐션 프로그램으로 생성하면 접근성이 쉬울 것으로 생각했습니다. 이에 버전 2를 만들어 크롬 익스텐션을 통해 배포했습니다."
    ],
    "goal": [
      "원하는 색상을 골라서 조합 및 저장하는 기능을 제공하여, 디자인이나 인테리어를 진행할 때 색 조합을 편리하게 다룰 수 있도록 하는 것입니다."
    ],
    "feature": [
      "색상을 선택할 수 있으며 해당 색상 배열을 조정할 수 있습니다.",
      "선택한 색상 조합을 저장할 수 있습니다.",
      "저장된 조합을 편집하거나 삭제할 수 있습니다."
    ],
    "tech": [
      [
        {
          "name": "HTML, CSS, JavaScript",
          "explain": "색상을 조합하는 웹은 간단한 HTML과 CSS, JavaScript를 통해 구현할 수 있었습니다. 그래서 색상을 선택할 수 있는 라이브러리를 제외하고는 별도의 라이브러리나 프레임워크를 사용하지 않고 구현을 진행했습니다."
        },
        {
          "name": "GitHub Pages",
          "explain": "정적 웹사이트를 무료로 호스팅할 수 있는 서비스인 Github Pages를 통해 배포를 진행했습니다.\n\nGitHub Pages는 별도의 배포 도구 없이 GitHub 저장소의 gh-pages 브랜치에 push만 하면 자동으로 웹사이트를 배포할 수 있게 해줍니다. 또한, 복잡한 서버 설정 없이 HTML, CSS, JavaScript로 작성된 정적 파일을 호스팅할 수 있습니다."
        }
      ],
      [
        {
          "name": "HTML, CSS, JavaScript",
          "explain": "Chrome Extension을 통해 배포를 결정한 이후, 리액트를 사용하는 것에 많은 고민이 있었습니다. 하지만 리액트는 복잡한 상태 관리, 다중 컴포넌트 및 대규모 애플리케이션에 최적화되어 있지만 구현할 서비스는 그러한 기능이 없다고 판단했으며, 단순한 기능을 구현하는 데 복잡한 기술이 오히려 독이 될 수 있다고 생각했습니다."
        },
        {
          "name": "Chrome Extension",
          "explain": "Github Pages를 배포하고 사용자 평가를 진행하는 도중, '크롬 익스텐션을 통해 배포를 진행하면 접근성이 좋아질 것 같다.'는 피드백을 받아, 브라우저의 기본 기능을 확장하고 사용자 경험을 개선하기 위해 버전 2에서는 크롬 익스텐션을 통해 배포를 진행했습니다."
        }
      ]
    ]
  },
  {
    "title": "요리조리",
    "date": "2023.03 - 2023.12",
    "tags": ["4인 팀", "졸업 프로젝트", "반응형"],
    "color": "#FFA800",
    "link": "https://yori-zori.com/",
    "git": "https://github.com/rkddusen/yorizori_frontend",
    "introduce": [
      "레시피를 조회하고 저장할 수 있는 웹서비스를 제작하는 프로젝트입니다.",
      "4인으로 구성된 팀 프로젝트입니다. 백엔드 개발 2명, AI 개발 1명과 같이 진행했습니다.",
      "기존 레시피 사이트는 조회에만 초점이 맞추어져 있으며, 추천에 대한 사용자 니즈 파악이 결여되어 있다고 판단했습니다.",
      "또한, 레시피를 작성할 때 더 편리한 느낌을 주고 싶었습니다.",
      "이에, 조회뿐만 아니라 다양한 방식의 검색, 사용자 맞춤 추천, 레시피 작성의 편의성을 증대시키는 템플릿화 등 사용자에게 맞춰진 서비스를 만들고자 했습니다."
    ],
    "goal": [
      "조회, 검색, 등록, 추천 기능을 통해 사용자는 레시피에 대한 정보를 얻고, 타인과 그 정보를 공유 및 평가할 수 있도록 하는 것입니다.",
      "다른 레시피 웹과는 차별화된, 사용자가 쉽게 레시피를 등록할 수 있는 템플릿을 제공하는 것입니다.",
      "오늘의 추천과 사용자 맞춤 추천으로 사용자들이 더 쉽게 원하는 메뉴를 찾을 수 있도록 돕는 것입니다.",
      "이를 통해 궁극적으로 사용자들이 편리하게 요리 레시피를 검색하고, 작성하며 공유할 수 있게 되어 요리를 즐기는 데 더 많은 시간을 쏟을 수 있도록 하는 것입니다."
    ],
    "feature": [
      "템플릿에 기반하여 레시피를 작성할 수 있습니다. 템플릿 요소는 총 6가지(조건, 재료, 크기, 시간, 조리 도구, 행동)로 각각의 항목을 통해 하나의 문장이 완성됩니다.",
      "사용자의 나이, 성별뿐만 아니라 작성 글, 댓글 단 글 등의 이용 기록을 통해 추천되는 사용자 맞춤 추천 서비스를 이용할 수 있습니다.",
      "요리명뿐만 아닌 재료를 통해서 레시피를 검색할 수 있습니다.",
      "공유등록이 가능하게 하여 원작 레시피의 출처를 남긴 상태로 하나의 요리에 대한 다양한 레시피를 작성하고 조회할 수 있습니다.",
      "현재 위치를 기준으로 주변 식당 위치 정보를 제공받을 수 있습니다."
    ],
    "role": [
      {
        "name": "기획(요구사항 분석 및 설계)",
        "explain": "모든 팀원이 함께 기획을 진행했습니다.\n\n프로젝트의 목표와 부합하는 기능을 기획하기 위해, 먼저 요구사항 분석을 통해 기능적 요구사항과 비기능적 요구사항을 명확히 파악했습니다. 기능적 요구사항은 사용자가 원하는 주요 기능과 그 기능이 제공해야 할 구체적인 성능과 조건을 중심으로 정의했으며, 비기능적 요구사항은 성능, 보안, 확장성, 유지보수성 등 사용자 경험과 시스템 품질에 영향을 미치는 요소들을 고려했습니다.\n\n이후, 팀원들과 각 요구사항을 어떻게 구현할 것인지 논의한 후 설계를 통해 기능을 세분화하고 모듈화했습니다."
      },
      {
        "name": "디자인",
        "explain": "사용자 경험을 최우선으로 고려하여 직관적이고 시각적으로 매력적인 인터페이스를 개발했습니다. 또한 다양한 디바이스에서 일관된 사용자 경험을 보장하기 위해 반응형 디자인을 구현했습니다."
      },
      {
        "name": "프론트엔드 개발",
        "explain": "프로젝트를 구성하는 모든 페이지를 담당했습니다. 대표적으로 메인 페이지를 포함하여 레시피 조회 페이지, 레시피 작성 페이지, 레시피의 순위를 알 수 있는 랭킹 페이지, 레시피 추천 페이지가 있습니다. 또한 레시피 작성을 위한 템플릿을 통해 더 쉽게 작성할 수 있도록 개발했습니다.\n\n프론트엔드 개발자로서 JavaScript와 React를 사용하여 사용자 인터페이스와 사용자 경험을 최적화하는 데 중점을 두고 프로젝트를 진행했습니다. 컴포넌트를 모듈화하여 유지보수성과 재사용성을 높였으며, React Router를 통해 애플리케이션 내의 페이지 전환을 원활하게 구현했습니다.\n\n또한, 사용자 데이터와 상호작용을 할 수 있도록 Axios를 통해 API 통신을 구현하고, 다양한 브라우저와 디바이스에서 테스트하여 모든 사용자에게 최적의 경험을 제공할 수 있도록 했습니다."
      },
      {
        "name": "테스트",
        "explain": "모든 팀원이 함께 테스트를 진행했습니다.\n\n프로젝트의 품질을 보장하기 위해 테스트 명세서를 작성하고, 다양한 시나리오를 고려하여 철저한 테스트를 수행했습니다. 기능별로 단위 테스트를 작성하여 개별 컴포넌트와 모듈이 의도한 대로 작동하는지 확인했습니다."
      }
    ],
    "tech": [
      [
        {
          "name": "JavaScript, React",
          "explain": "레시피 작성의 편리성을 위한 템플릿을 도입하면서 상태 변화에 따라 UI를 효율적으로 업데이트하여 매끄럽고 반응성 있는 UI가 필요했습니다. 또한, 리액트는 강력한 커뮤니티와 생태계를 보유하고 있어 프론트엔드 개발을 조금 더 수월하게 할 수 있습니다."
        },
        {
          "name": "React Router",
          "explain": "프로젝트에서 여러 페이지를 구현하고, 페이지 간의 전환을 원활하게 처리하기 위해 React Router를 사용했습니다.\n\n서버에서 라우팅하는 것이 아닌 클라이언트에서 라우팅을 관리하여 매끄러운 페이지 이동으로 사용자 경험을 개선하고 성능을 최적화할 수 있습니다."
        },
        {
          "name": "Axios",
          "explain": "백엔드와 HTTP 통신을 진행할 때, Axios와 Fetch 중 Axios를 선택했습니다. Axios는 Fetch와 달리 자동으로 JSON 데이터를 파싱할 수 있어 코드가 더 간결하고 직관적이며, HTTP 에러를 자동으로 감지하고 catch 블록에서 처리할 수 있기 때문에 에러 핸들링이 더 용이합니다."
        },
        {
          "name": "Styled-components",
          "explain": "Styled-components는 리액트의 컴포넌트 기반 아키텍처를 따르기 때문에 리액트와 같은 위치에서 스타일을 관리할 수 있습니다. 또한, 리액트의 props를 사용하여 스타일링하는 것이 용이했기에 상태에 따라 스타일을 쉽게 변경할 수 있습니다."
        }
      ]
    ]
  },
  {
    "title": "Duyeon's Portfolio",
    "date": "2024.09",
    "tags": ["개인", "포트폴리오 프로젝트", "반응형"],
    "color": "#e0e0e0",
    "introduce": ["나만의 포트폴리오 사이트를 만들기 위한 프로젝트입니다."],
    "goal": [
      "포트폴리오를 통해 지금까지 진행한 프로젝트들을 이해할 수 있게 하는 것입니다."
    ],
    "feature": [
      "다크모드를 통해 UI 테마 옵션을 선택할 수 있습니다.",
      "프로젝트의 상세 설명을 통해 어떤 프로젝트를 진행한 것인지 알 수 있습니다."
    ],
    "tech": [
      [
        {
          "name": "TypeScript",
          "explain": "TypeScript는 정적 타입 검사를 통해 코드의 안정성을 높이고 런타임 오류를 줄일 수 있습니다. 또한, 변수나 함수의 타입이 코드 작성 중에 실시간으로 확인되기 때문에, 코드의 의도를 명확하게 표현할 수 있으며, 실수를 사전에 방지할 수 있어 생산성이 향상됩니다."
        },
        {
          "name": "React",
          "explain": "리액트는 컴포넌트 기반 아키텍처를 제공하여 코드의 재사용성이 높아지고 유지보수성이 향상됩니다. 또한 가상 DOM을 사용하여 변경된 부분만 빠르게 업데이트하기 때문에 DOM 조작 성능이 최적화되어 빠른 렌더링을 지원합니다."
        },
        {
          "name": "Emotion",
          "explain": "Emotion은 styled-components와 유사한 CSS-in-JS 라이브러리로, 자바스크립트 코드 내에서 스타일을 작성할 수 있게 해줍니다. 이를 통해 컴포넌트별로 스타일을 관리할 수 있어 코드의 가독성과 유지보수성을 높일 수 있습니다.\n\nEmotion은 빌드 시와 런타임에서 더 작은 CSS를 생성하며, 필요한 스타일만 로드하여 성능 최적화를 지원합니다. 이를 통해 웹사이트의 로딩 속도를 빠르게 유지할 수 있어서 다크 모드와 같은 동적 스타일 변경이 필요한 웹사이트에서 유연하게 사용할 수 있습니다."
        }
      ]
    ]
  },
  {
    "title": "Soool with Wine",
    "date": "2024.05 - 진행 중",
    "tags": ["2인 팀", "사이드 프로젝트", "반응형"],
    "color": "#FF8080",
    "introduce": [
      "와인 정보를 담은 웹서비스를 제작하는 프로젝트입니다.",
      "2인으로 구성된 팀 프로젝트입니다. 백엔드 개발 1명과 같이 진행하고 있습니다.",
      "와인 서비스로부터 다양한 종류의 술까지 확장할 수 있도록 했습니다."
    ],
    "goal": [
      "개인별로 마시기 좋았던 와인을 찾아서 기록하여 해당 와인을 나중에 쉽게 찾을 수 있도록 하는 것입니다.",
      "또한, 해당 와인의 비슷한 종류를 통해 다양한 시도를 해볼 기회를 제공하는 것입니다."
    ],
    "feature": [
      "와인과 와이너리 정보를 조회할 수 있습니다.",
      "필터링(종류, 당도, 산도, 바디, 타닌, 국가)을 통해 원하는 특성의 와인을 찾을 수 있습니다.",
      "현재 위치를 기준으로 주변 식당 위치 정보를 제공받을 수 있습니다."
    ],
    "role": [
      {
        "name": "기획",
        "explain": "모든 팀원이 함께 기획을 진행했습니다.\n\n프로젝트의 목표와 부합할 수 있는 기능을 기획하고자 했으며 사용자 입장에서 필요한 기능과 사용 흐름을 고려하여 주요 기능들을 결정했습니다. 사용자 피드백을 반영해 기능 우선순위를 조정하고, 사용자 요구를 충족할 수 있는 방향으로 기획을 수정해 나갔습니다. 이를 통해 최종적으로 프로젝트의 방향성을 명확히 했습니다."
      },
      {
        "name": "디자인",
        "explain": "사용자 경험을 최우선으로 고려하여 직관적이고 시각적으로 매력적인 인터페이스를 개발했습니다. 또한 다양한 디바이스에서 일관된 사용자 경험을 보장하기 위해 반응형 디자인을 구현했습니다."
      },
      {
        "name": "프론트엔드 개발",
        "explain": "프로젝트를 구성하는 모든 페이지를 담당하고 있습니다. 대표적으로 메인 페이지를 포함하여 와인 조회 페이지, 주변 와인 페이지가 있습니다.\n\n프론트엔드 개발자로서 TypeScript와 React를 사용하여 사용자 인터페이스와 사용자 경험을 최적화하는 데 중점을 두고 프로젝트를 진행하고 있습니다. 컴포넌트를 모듈화하여 유지보수성과 재사용성을 높였으며, React Router를 통해 애플리케이션 내의 페이지 전환을 원활하게 구현하고 있습니다.\n\n또한, 와인 및 사용자 데이터와 상호작용을 할 수 있도록 Axios를 통해 API 통신을 구현하고 있습니다."
      }
    ],
    "tech": [
      [
        {
          "name": "Vite",
          "explain": "Vite는 빠른 개발 서버를 제공하며, 변경 사항을 즉시 반영합니다. 미리 구성된 환경 설정이 간단하며 빌드 역시 브라우저에서 필요한 파일만 로딩하여 시간이 단축됩니다."
        },
        {
          "name": "TypeScript",
          "explain": "TypeScript는 정적 타입 검사를 통해 코드의 안정성을 높이고 런타임 오류를 줄일 수 있습니다. 또한, 변수나 함수의 타입이 코드 작성 중에 실시간으로 확인되기 때문에, 코드의 의도를 명확하게 표현할 수 있으며, 실수를 사전에 방지할 수 있어 생산성이 향상됩니다."
        },
        {
          "name": "React",
          "explain": "리액트는 컴포넌트 기반 아키텍처를 제공하여 코드의 재사용성이 높아지고 유지보수성이 향상됩니다. 또한 가상 DOM을 사용하여 변경된 부분만 빠르게 업데이트하기 때문에 DOM 조작 성능이 최적화되어 빠른 렌더링을 지원합니다."
        },
        {
          "name": "React Router",
          "explain": "프로젝트에서 여러 페이지를 구현하고, 페이지 간의 전환을 원활하게 처리하기 위해 React Router를 사용했습니다.\n\n서버에서 라우팅하는 것이 아닌 클라이언트에서 라우팅을 관리하여 매끄러운 페이지 이동으로 사용자 경험을 개선하고 성능을 최적화할 수 있습니다."
        },
        {
          "name": "Axios",
          "explain": "백엔드와 HTTP 통신을 진행할 때, Axios와 Fetch 중 Axios를 선택했습니다. Axios는 Fetch와 달리 자동으로 JSON 데이터를 파싱할 수 있어 코드가 더 간결하고 직관적이며, HTTP 에러를 자동으로 감지하고 catch 블록에서 처리할 수 있기 때문에 에러 핸들링이 더 용이합니다."
        },
        {
          "name": "Tailwind CSS",
          "explain": "Tailwind CSS는 유틸리티-퍼스트 접근 방식으로, 유틸리티 클래스를 사용하여 빠르게 스타일을 적용할 수 있게 해줍니다. 이러한 클래스들은 재사용이 가능하며, 일관된 스타일링을 유지하면서 개발 속도를 높일 수 있습니다."
        }
      ]
    ]
  }
]
